<%@ CodeTemplate Language="C#" ResponseEncoding="UTF-8" TargetLanguage="C#" Description="Generates a EntityObject." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="Author" Type="String" Default="郑华" Category="CopyRight" Description="作者" Optional="true"%>
<%@ Property Name="ProjectName" Type="String"  Default="AMSApp" Category="Context" Description="项目名称" option = "true"%>
<%@ Property Name="ClassDescription" Type = "String" Category ="Context" Description="功能描述" %> 
<%@ Property Name="CopyRight" Type="System.String" Default="zhenghua"  Category="CopyRight" Optional="true"%>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>

/******************************************************************** FR 1.20E *******
* 项目名称：   <%= ProjectName %>
* 文件名:  	<%= GetFileName()%>
* 作者:		     <%= Author %>
* 创建日期:     <%= DateTime.Now.ToShortDateString() %>
* 功能描述:    <%= ClassDescription %>

*                                                           Copyright(C) <%= DateTime.Now.Year%> <%=CopyRight%>
*************************************************************************************/
#region Import NameSpace
using System;
using System.Data;
using AMSApp.zhenghua.EntityBase;
#endregion

namespace AMSApp.zhenghua.Entity
{
	/// <summary>
	/// **功能名称：<%=ClassDescription %>实体类
	/// </summary>
    [Serializable]
	[TableMapping(<%= GetTableName(SourceTable) %>)]
	public class <%= GetClassName(SourceTable) %>: EntityObjectBase
	{
		#region 数据表生成变量



		
		
		<% foreach (ColumnSchema column in SourceTable.Columns) { %>
		<%= GetMemberVariableDeclarationStatement(column) %>
		<% } %>
		
		#endregion
		
		#region 构造函数




		public <%= GetClassName(SourceTable) %>():base()
		{
		}
		
		public <%= GetClassName(SourceTable) %>(DataRow row):base(row)
		{
		}
		
		public <%= GetClassName(SourceTable) %>(DataTable table):base(table)
		{
		}
		
		public <%= GetClassName(SourceTable) %>(string  strXML):base(strXML)
		{
		}
		#endregion
		
		#region 系统生成属性




				
		<% for (int i = 0; i < SourceTable.Columns.Count; i++) { %>
		/// <summary>
		/// <%= SourceTable.Columns[i].Description %>
		/// </summary>
		[<%= GetColumnMappingString(SourceTable.Columns[i]) %>]
		public <%= GetCSharpVariableType(SourceTable.Columns[i]) %> <%= GetPropertyName(SourceTable.Columns[i]) %>
		{
			get {return <%= GetMemberVariableName(SourceTable.Columns[i]) %>;}
			set {<%= GetMemberVariableName(SourceTable.Columns[i]) %> = value;}
		}
		<% if (i < SourceTable.Columns.Count - 1) Response.Write("\r\n"); %>		
		<% } %>
		#endregion
	}	
}
<script runat="template">
public string GetTableName(TableSchema table)
{
	string strTableName = "";
	strTableName = "\"" + SourceTable.Name + "\"";	
	return strTableName;
}

public string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("private", column);
}

public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += GetCSharpVariableType(column) + " " + GetMemberVariableName(column);
	
	string defaultValue = GetMemberVariableDefaultValue(column);
	if (defaultValue != "")
	{
		statement += " = " + defaultValue;
	}
	
	statement += ";";
	
	return statement;
}

public string GetReaderAssignmentStatement(ColumnSchema column, int index)
{
	string statement = "if (!reader.IsDBNull(" + index.ToString() + ")) ";
	statement += GetMemberVariableName(column) + " = ";
	
	if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";
	
	statement += "reader." + GetReaderMethod(column) + "(" + index.ToString() + ");";
	
	return statement;
}

public string GetCamelCaseName(string value)
{
	return "_" + value;
}

public string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	string memberVariableName = GetCamelCaseName(propertyName);
	
	return memberVariableName;
}

public string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;
	
	if (propertyName == column.Table.Name + "Name") return "Name";
	if (propertyName == column.Table.Name + "Description") return "Description";
	
	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0,1 ).ToUpper()+ propertyName.Substring(1, propertyName.Length );
	
	return propertyName;
}
		
public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}

public string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

public string GetReaderMethod(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Byte:
		{
			return "GetByte";
		}
		case DbType.Int16:
		{
			return "GetInt16";
		}
		case DbType.Int32:
		{
			return "GetInt32";
		}
		case DbType.Int64:
		{
			return "GetInt64";
		}
		case DbType.AnsiStringFixedLength:
		case DbType.AnsiString:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "GetString";
		}
		case DbType.Boolean:
		{
			return "GetBoolean";
		}
		case DbType.Guid:
		{
			return "GetGuid";
		}
		case DbType.Currency:
		case DbType.Decimal:
		{
			return "GetDecimal";
		}
		case DbType.DateTime:
		case DbType.Date:
		{
			return "GetDateTime";
		}
		case DbType.Binary:
		{
			return "GetBytes";
		}
		default:
		{
			return "__SQL__" + column.DataType;
		}
	}
}

public string GetClassName(TableSchema table)
{
	string strClassName = table.Name;
	return strClassName.Substring(2,1 ).ToUpper()+ strClassName.Substring(3, strClassName.Length-3 );
	
}

public string GetSqlDbType(ColumnSchema column)
{
	switch (column.NativeType)
	{
		case "bigint": return "BigInt";
		case "binary": return "Binary";
		case "bit": return "Bit";
		case "char": return "Char";
		case "datetime": return "DateTime";
		case "decimal": return "Decimal";
		case "float": return "Float";
		case "image": return "Image";
		case "int": return "Int";
		case "money": return "Money";
		case "nchar": return "NChar";
		case "ntext": return "NText";
		case "numeric": return "Decimal";
		case "nvarchar": return "NVarChar";
		case "real": return "Real";
		case "smalldatetime": return "SmallDateTime";
		case "smallint": return "SmallInt";
		case "smallmoney": return "SmallMoney";
		case "sql_variant": return "Variant";
		case "sysname": return "NChar";
		case "text": return "Text";
		case "timestamp": return "Timestamp";
		case "tinyint": return "TinyInt";
		case "uniqueidentifier": return "UniqueIdentifier";
		case "varbinary": return "VarBinary";
		case "varchar": return "VarChar";
		default: return "__UNKNOWN__" + column.NativeType;
	}
}

public string GetPrimaryKeyType(TableSchema table)
{
	if (table.PrimaryKey != null)
	{
		if (table.PrimaryKey.MemberColumns.Count == 1)
		{
			return GetCSharpVariableType(table.PrimaryKey.MemberColumns[0]);
		}
		else
		{
			throw new ApplicationException("This template will not work on primary keys with more than one member column.");
		}
	}
	else
	{
		throw new ApplicationException("This template will only work on tables with a primary key.");
	}
}

public override string GetFileName()
{
	return this.GetClassName(this.SourceTable) + ".cs";
}


public string GetColumnMappingString(ColumnSchema column)
{
	string strMappingString = "ColumnMapping(\"@ColumnName\",IsPrimaryKey=@IsPrimaryKey,IsIdentity=@IsIdentity,IsVersionNumber=@IsVersionNumber)";
	strMappingString = strMappingString.Replace("@ColumnName",column.Name);
	
	if(column.IsPrimaryKeyMember)
	{
		strMappingString = strMappingString.Replace("@IsPrimaryKey","true");
	}
	else
	{
		strMappingString = strMappingString.Replace("@IsPrimaryKey","false");
	}
	
	if( ((bool)column.ExtendedProperties["CS_IsIdentity"].Value) == true)
    {
        strMappingString = strMappingString.Replace("@IsIdentity"  ,"true");
    }
	else
	{
		strMappingString = strMappingString.Replace("@IsIdentity"  ,"false");
	}

    if(column.Name == "biVersion")
	{
		strMappingString = strMappingString.Replace("@IsVersionNumber"  ,"true");
	}
	else
	{
		strMappingString = strMappingString.Replace("@IsVersionNumber"  ,"false");
	}
	
	return strMappingString;
}
</script>